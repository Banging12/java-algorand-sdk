/*
 * Algod REST API.
 * API Endpoint for AlgoD Operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is a touched-up version of models generated by swagger-codegen from algod's spec.
 */

package com.algorand.algosdk.algod.model;

import org.apache.commons.lang3.ObjectUtils;
import com.google.gson.annotations.SerializedName;

/**
 * NodeStatus contains the information about a node status
 */
public class NodeStatus {

  @SerializedName("catchupTime")
  private Long catchupTime = null;

  @SerializedName("lastConsensusVersion")
  private String lastConsensusVersion = null;

  @SerializedName("lastRound")
  private Long lastRound = null;

  @SerializedName("nextConsensusVersion")
  private String nextConsensusVersion = null;

  @SerializedName("nextConsensusVersionRound")
  private Long nextConsensusVersionRound = null;

  @SerializedName("nextConsensusVersionSupported")
  private Boolean nextConsensusVersionSupported = null;

  @SerializedName("timeSinceLastRound")
  private Long timeSinceLastRound = null;
  public NodeStatus catchupTime(Long catchupTime) {
    this.catchupTime = catchupTime;
    return this;
  }

  

  /**
  * CatchupTime in nanoseconds
  * @return catchupTime
  **/
  public Long getCatchupTime() {
    return catchupTime;
  }
  public void setCatchupTime(Long catchupTime) {
    this.catchupTime = catchupTime;
  }
  public NodeStatus lastConsensusVersion(String lastConsensusVersion) {
    this.lastConsensusVersion = lastConsensusVersion;
    return this;
  }

  

  /**
  * LastVersion indicates the last consensus version supported
  * @return lastConsensusVersion
  **/
  public String getLastConsensusVersion() {
    return lastConsensusVersion;
  }
  public void setLastConsensusVersion(String lastConsensusVersion) {
    this.lastConsensusVersion = lastConsensusVersion;
  }
  public NodeStatus lastRound(Long lastRound) {
    this.lastRound = lastRound;
    return this;
  }

  

  /**
  * LastRound indicates the last round seen
  * @return lastRound
  **/
  public Long getLastRound() {
    return lastRound;
  }
  public void setLastRound(Long lastRound) {
    this.lastRound = lastRound;
  }
  public NodeStatus nextConsensusVersion(String nextConsensusVersion) {
    this.nextConsensusVersion = nextConsensusVersion;
    return this;
  }

  

  /**
  * NextVersion of consensus protocol to use
  * @return nextConsensusVersion
  **/
  public String getNextConsensusVersion() {
    return nextConsensusVersion;
  }
  public void setNextConsensusVersion(String nextConsensusVersion) {
    this.nextConsensusVersion = nextConsensusVersion;
  }
  public NodeStatus nextConsensusVersionRound(Long nextConsensusVersionRound) {
    this.nextConsensusVersionRound = nextConsensusVersionRound;
    return this;
  }

  

  /**
  * NextVersionRound is the round at which the next consensus version will apply
  * @return nextConsensusVersionRound
  **/
  public Long getNextConsensusVersionRound() {
    return nextConsensusVersionRound;
  }
  public void setNextConsensusVersionRound(Long nextConsensusVersionRound) {
    this.nextConsensusVersionRound = nextConsensusVersionRound;
  }
  public NodeStatus nextConsensusVersionSupported(Boolean nextConsensusVersionSupported) {
    this.nextConsensusVersionSupported = nextConsensusVersionSupported;
    return this;
  }

  

  /**
  * NextVersionSupported indicates whether the next consensus version is supported by this node
  * @return nextConsensusVersionSupported
  **/
  public Boolean isNextConsensusVersionSupported() {
    return nextConsensusVersionSupported;
  }
  public void setNextConsensusVersionSupported(Boolean nextConsensusVersionSupported) {
    this.nextConsensusVersionSupported = nextConsensusVersionSupported;
  }
  public NodeStatus timeSinceLastRound(Long timeSinceLastRound) {
    this.timeSinceLastRound = timeSinceLastRound;
    return this;
  }

  

  /**
  * TimeSinceLastRound in nanoseconds
  * @return timeSinceLastRound
  **/
  public Long getTimeSinceLastRound() {
    return timeSinceLastRound;
  }
  public void setTimeSinceLastRound(Long timeSinceLastRound) {
    this.timeSinceLastRound = timeSinceLastRound;
  }
  @Override
  public boolean equals(java.lang.Object o) {
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
    NodeStatus nodeStatus = (NodeStatus) o;
    return ObjectUtils.equals(this.catchupTime, nodeStatus.catchupTime) &&
    ObjectUtils.equals(this.lastConsensusVersion, nodeStatus.lastConsensusVersion) &&
    ObjectUtils.equals(this.lastRound, nodeStatus.lastRound) &&
    ObjectUtils.equals(this.nextConsensusVersion, nodeStatus.nextConsensusVersion) &&
    ObjectUtils.equals(this.nextConsensusVersionRound, nodeStatus.nextConsensusVersionRound) &&
    ObjectUtils.equals(this.nextConsensusVersionSupported, nodeStatus.nextConsensusVersionSupported) &&
    ObjectUtils.equals(this.timeSinceLastRound, nodeStatus.timeSinceLastRound);
  }

  @Override
  public int hashCode() {
    return ObjectUtils.hashCodeMulti(catchupTime, lastConsensusVersion, lastRound, nextConsensusVersion, nextConsensusVersionRound, nextConsensusVersionSupported, timeSinceLastRound);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeStatus {\n");
    
    sb.append("    catchupTime: ").append(toIndentedString(catchupTime)).append("\n");
    sb.append("    lastConsensusVersion: ").append(toIndentedString(lastConsensusVersion)).append("\n");
    sb.append("    lastRound: ").append(toIndentedString(lastRound)).append("\n");
    sb.append("    nextConsensusVersion: ").append(toIndentedString(nextConsensusVersion)).append("\n");
    sb.append("    nextConsensusVersionRound: ").append(toIndentedString(nextConsensusVersionRound)).append("\n");
    sb.append("    nextConsensusVersionSupported: ").append(toIndentedString(nextConsensusVersionSupported)).append("\n");
    sb.append("    timeSinceLastRound: ").append(toIndentedString(timeSinceLastRound)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
