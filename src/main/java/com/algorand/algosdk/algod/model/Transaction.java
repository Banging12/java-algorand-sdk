/*
 * Algod REST API.
 * API Endpoint for AlgoD Operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is a touched-up version of models generated by swagger-codegen from algod's spec.
 */

package com.algorand.algosdk.algod.model;

import com.google.gson.annotations.SerializedName;
import org.apache.commons.lang3.ObjectUtils;

import java.util.ArrayList;
import java.util.List;

/**
 * Transaction contains all fields common to all transactions and serves as an envelope to all transactions type
 */
public class Transaction {

  @SerializedName("fee")
  private Long fee = null;

  @SerializedName("first-round")
  private Long firstRound = null;

  @SerializedName("from")
  private String from = null;

  @SerializedName("last-round")
  private Long lastRound = null;

  @SerializedName("noteb64")
  private List<Long> noteb64 = null;

  @SerializedName("payment")
  private PaymentTransactionType payment = null;

  @SerializedName("poolerror")
  private String poolerror = null;

  @SerializedName("round")
  private Long round = null;

  @SerializedName("tx")
  private String tx = null;

  @SerializedName("type")
  private String type = null;
  public Transaction fee(Long fee) {
    this.fee = fee;
    return this;
  }

  

  /**
  * Fee is the transaction fee
  * @return fee
  **/
  public Long getFee() {
    return fee;
  }
  public void setFee(Long fee) {
    this.fee = fee;
  }
  public Transaction firstRound(Long firstRound) {
    this.firstRound = firstRound;
    return this;
  }

  

  /**
  * FirstRound indicates the first valid round for this transaction
  * @return firstRound
  **/
  public Long getFirstRound() {
    return firstRound;
  }
  public void setFirstRound(Long firstRound) {
    this.firstRound = firstRound;
  }
  public Transaction from(String from) {
    this.from = from;
    return this;
  }

  

  /**
  * From is the sender&#x27;s address
  * @return from
  **/
  public String getFrom() {
    return from;
  }
  public void setFrom(String from) {
    this.from = from;
  }
  public Transaction lastRound(Long lastRound) {
    this.lastRound = lastRound;
    return this;
  }

  

  /**
  * LastRound indicates the last valid round for this transaction
  * @return lastRound
  **/
  public Long getLastRound() {
    return lastRound;
  }
  public void setLastRound(Long lastRound) {
    this.lastRound = lastRound;
  }
  public Transaction noteb64(List<Long> noteb64) {
    this.noteb64 = noteb64;
    return this;
  }

  public Transaction addNoteb64Item(Long noteb64Item) {
    if (this.noteb64 == null) {
      this.noteb64 = new ArrayList<>();
    }
    this.noteb64.add(noteb64Item);
    return this;
  }

  /**
  * Note is a free form data
  * @return noteb64
  **/
  public List<Long> getNoteb64() {
    return noteb64;
  }
  public void setNoteb64(List<Long> noteb64) {
    this.noteb64 = noteb64;
  }
  public Transaction payment(PaymentTransactionType payment) {
    this.payment = payment;
    return this;
  }

  

  /**
  * Get payment
  * @return payment
  **/
  public PaymentTransactionType getPayment() {
    return payment;
  }
  public void setPayment(PaymentTransactionType payment) {
    this.payment = payment;
  }
  public Transaction poolerror(String poolerror) {
    this.poolerror = poolerror;
    return this;
  }

  

  /**
  * PoolError indicates the transaction was evicted from this node&#x27;s transaction pool (if non-empty).  A non-empty PoolError does not guarantee that the transaction will never be committed; other nodes may not have evicted the transaction and may attempt to commit it in the future.
  * @return poolerror
  **/
  public String getPoolerror() {
    return poolerror;
  }
  public void setPoolerror(String poolerror) {
    this.poolerror = poolerror;
  }
  public Transaction round(Long round) {
    this.round = round;
    return this;
  }

  

  /**
  * ConfirmedRound indicates the block number this transaction appeared in
  * @return round
  **/
  public Long getRound() {
    return round;
  }
  public void setRound(Long round) {
    this.round = round;
  }
  public Transaction tx(String tx) {
    this.tx = tx;
    return this;
  }

  

  /**
  * TxID is the transaction ID
  * @return tx
  **/
  public String getTx() {
    return tx;
  }
  public void setTx(String tx) {
    this.tx = tx;
  }
  public Transaction type(String type) {
    this.type = type;
    return this;
  }

  

  /**
  * Get type
  * @return type
  **/
  public String getType() {
    return type;
  }
  public void setType(String type) {
    this.type = type;
  }
  @Override
  public boolean equals(java.lang.Object o) {
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
    Transaction transaction = (Transaction) o;
    return ObjectUtils.equals(this.fee, transaction.fee) &&
    ObjectUtils.equals(this.firstRound, transaction.firstRound) &&
    ObjectUtils.equals(this.from, transaction.from) &&
    ObjectUtils.equals(this.lastRound, transaction.lastRound) &&
    ObjectUtils.equals(this.noteb64, transaction.noteb64) &&
    ObjectUtils.equals(this.payment, transaction.payment) &&
    ObjectUtils.equals(this.poolerror, transaction.poolerror) &&
    ObjectUtils.equals(this.round, transaction.round) &&
    ObjectUtils.equals(this.tx, transaction.tx) &&
    ObjectUtils.equals(this.type, transaction.type);
  }

  @Override
  public int hashCode() {
    return ObjectUtils.hashCodeMulti(fee, firstRound, from, lastRound, noteb64, payment, poolerror, round, tx, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    firstRound: ").append(toIndentedString(firstRound)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    lastRound: ").append(toIndentedString(lastRound)).append("\n");
    sb.append("    noteb64: ").append(toIndentedString(noteb64)).append("\n");
    sb.append("    payment: ").append(toIndentedString(payment)).append("\n");
    sb.append("    poolerror: ").append(toIndentedString(poolerror)).append("\n");
    sb.append("    round: ").append(toIndentedString(round)).append("\n");
    sb.append("    tx: ").append(toIndentedString(tx)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
